// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	articles "FinalProject/features/articles"

	mock "github.com/stretchr/testify/mock"
)

// ArticleServiceInterface is an autogenerated mock type for the ArticleServiceInterface type
type ArticleServiceInterface struct {
	mock.Mock
}

// ArticleDashboard provides a mock function with given fields:
func (_m *ArticleServiceInterface) ArticleDashboard() (articles.ArticleDashboard, error) {
	ret := _m.Called()

	var r0 articles.ArticleDashboard
	var r1 error
	if rf, ok := ret.Get(0).(func() (articles.ArticleDashboard, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() articles.ArticleDashboard); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(articles.ArticleDashboard)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateArticle provides a mock function with given fields: newData
func (_m *ArticleServiceInterface) CreateArticle(newData articles.Article) (*articles.Article, error) {
	ret := _m.Called(newData)

	var r0 *articles.Article
	var r1 error
	if rf, ok := ret.Get(0).(func(articles.Article) (*articles.Article, error)); ok {
		return rf(newData)
	}
	if rf, ok := ret.Get(0).(func(articles.Article) *articles.Article); ok {
		r0 = rf(newData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*articles.Article)
		}
	}

	if rf, ok := ret.Get(1).(func(articles.Article) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArticle provides a mock function with given fields: id
func (_m *ArticleServiceInterface) GetArticle(id int) ([]articles.ArticleInfo, error) {
	ret := _m.Called(id)

	var r0 []articles.ArticleInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]articles.ArticleInfo, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) []articles.ArticleInfo); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]articles.ArticleInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArticleByDoctor provides a mock function with given fields: id
func (_m *ArticleServiceInterface) GetArticleByDoctor(id int) ([]articles.ArticleInfo, error) {
	ret := _m.Called(id)

	var r0 []articles.ArticleInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]articles.ArticleInfo, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) []articles.ArticleInfo); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]articles.ArticleInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArticles provides a mock function with given fields: name, kategori, timePublication, limit
func (_m *ArticleServiceInterface) GetArticles(name string, kategori string, timePublication int, limit int) ([]articles.ArticleInfo, error) {
	ret := _m.Called(name, kategori, timePublication, limit)

	var r0 []articles.ArticleInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, int, int) ([]articles.ArticleInfo, error)); ok {
		return rf(name, kategori, timePublication, limit)
	}
	if rf, ok := ret.Get(0).(func(string, string, int, int) []articles.ArticleInfo); ok {
		r0 = rf(name, kategori, timePublication, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]articles.ArticleInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, int, int) error); ok {
		r1 = rf(name, kategori, timePublication, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PublishArticle provides a mock function with given fields: id
func (_m *ArticleServiceInterface) PublishArticle(id int) (bool, error) {
	ret := _m.Called(id)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RejectArticle provides a mock function with given fields: id
func (_m *ArticleServiceInterface) RejectArticle(id int) (bool, error) {
	ret := _m.Called(id)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateArticle provides a mock function with given fields: newData, id
func (_m *ArticleServiceInterface) UpdateArticle(newData articles.UpdateArticle, id int) (bool, error) {
	ret := _m.Called(newData, id)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(articles.UpdateArticle, int) (bool, error)); ok {
		return rf(newData, id)
	}
	if rf, ok := ret.Get(0).(func(articles.UpdateArticle, int) bool); ok {
		r0 = rf(newData, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(articles.UpdateArticle, int) error); ok {
		r1 = rf(newData, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewArticleServiceInterface creates a new instance of ArticleServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArticleServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ArticleServiceInterface {
	mock := &ArticleServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
