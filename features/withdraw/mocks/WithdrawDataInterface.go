// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	withdraw "FinalProject/features/withdraw"

	mock "github.com/stretchr/testify/mock"
)

// WithdrawDataInterface is an autogenerated mock type for the WithdrawDataInterface type
type WithdrawDataInterface struct {
	mock.Mock
}

// GetAll provides a mock function with given fields:
func (_m *WithdrawDataInterface) GetAll() ([]withdraw.WithdrawInfo, error) {
	ret := _m.Called()

	var r0 []withdraw.WithdrawInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]withdraw.WithdrawInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []withdraw.WithdrawInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]withdraw.WithdrawInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllDoctor provides a mock function with given fields: id
func (_m *WithdrawDataInterface) GetAllDoctor(id uint) ([]withdraw.WithdrawInfo, error) {
	ret := _m.Called(id)

	var r0 []withdraw.WithdrawInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]withdraw.WithdrawInfo, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) []withdraw.WithdrawInfo); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]withdraw.WithdrawInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBalance provides a mock function with given fields: idDoctor
func (_m *WithdrawDataInterface) GetBalance(idDoctor uint) (uint, error) {
	ret := _m.Called(idDoctor)

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (uint, error)); ok {
		return rf(idDoctor)
	}
	if rf, ok := ret.Get(0).(func(uint) uint); ok {
		r0 = rf(idDoctor)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(idDoctor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *WithdrawDataInterface) GetByID(id int) (*withdraw.WithdrawInfo, error) {
	ret := _m.Called(id)

	var r0 *withdraw.WithdrawInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*withdraw.WithdrawInfo, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *withdraw.WithdrawInfo); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*withdraw.WithdrawInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserDoctor provides a mock function with given fields: id
func (_m *WithdrawDataInterface) GetUserDoctor(id uint) (uint, error) {
	ret := _m.Called(id)

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (uint, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) uint); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: newData
func (_m *WithdrawDataInterface) Insert(newData withdraw.Withdraw) (*withdraw.Withdraw, error) {
	ret := _m.Called(newData)

	var r0 *withdraw.Withdraw
	var r1 error
	if rf, ok := ret.Get(0).(func(withdraw.Withdraw) (*withdraw.Withdraw, error)); ok {
		return rf(newData)
	}
	if rf, ok := ret.Get(0).(func(withdraw.Withdraw) *withdraw.Withdraw); ok {
		r0 = rf(newData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*withdraw.Withdraw)
		}
	}

	if rf, ok := ret.Get(1).(func(withdraw.Withdraw) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LessBalance provides a mock function with given fields: idDoctor, balance
func (_m *WithdrawDataInterface) LessBalance(idDoctor uint, balance uint) (bool, error) {
	ret := _m.Called(idDoctor, balance)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (bool, error)); ok {
		return rf(idDoctor, balance)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) bool); ok {
		r0 = rf(idDoctor, balance)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(idDoctor, balance)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: id, newData
func (_m *WithdrawDataInterface) UpdateStatus(id int, newData withdraw.Withdraw) (bool, error) {
	ret := _m.Called(id, newData)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int, withdraw.Withdraw) (bool, error)); ok {
		return rf(id, newData)
	}
	if rf, ok := ret.Get(0).(func(int, withdraw.Withdraw) bool); ok {
		r0 = rf(id, newData)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int, withdraw.Withdraw) error); ok {
		r1 = rf(id, newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWithdrawDataInterface creates a new instance of WithdrawDataInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWithdrawDataInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *WithdrawDataInterface {
	mock := &WithdrawDataInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
