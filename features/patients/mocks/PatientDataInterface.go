// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	patients "FinalProject/features/patients"

	mock "github.com/stretchr/testify/mock"
)

// PatientDataInterface is an autogenerated mock type for the PatientDataInterface type
type PatientDataInterface struct {
	mock.Mock
}

// ActivateAccount provides a mock function with given fields: id
func (_m *PatientDataInterface) ActivateAccount(id int) (bool, error) {
	ret := _m.Called(id)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: status, name
func (_m *PatientDataInterface) GetAll(status string, name string) ([]patients.Patientdetail, error) {
	ret := _m.Called(status, name)

	var r0 []patients.Patientdetail
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) ([]patients.Patientdetail, error)); ok {
		return rf(status, name)
	}
	if rf, ok := ret.Get(0).(func(string, string) []patients.Patientdetail); ok {
		r0 = rf(status, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]patients.Patientdetail)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(status, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *PatientDataInterface) GetByID(id int) (patients.Patientdetail, error) {
	ret := _m.Called(id)

	var r0 patients.Patientdetail
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (patients.Patientdetail, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) patients.Patientdetail); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(patients.Patientdetail)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InactivateAccount provides a mock function with given fields: id
func (_m *PatientDataInterface) InactivateAccount(id int) (bool, error) {
	ret := _m.Called(id)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: newData
func (_m *PatientDataInterface) Insert(newData patients.Patiententity) (*patients.Patiententity, error) {
	ret := _m.Called(newData)

	var r0 *patients.Patiententity
	var r1 error
	if rf, ok := ret.Get(0).(func(patients.Patiententity) (*patients.Patiententity, error)); ok {
		return rf(newData)
	}
	if rf, ok := ret.Get(0).(func(patients.Patiententity) *patients.Patiententity); ok {
		r0 = rf(newData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*patients.Patiententity)
		}
	}

	if rf, ok := ret.Get(1).(func(patients.Patiententity) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginPatient provides a mock function with given fields: email, password
func (_m *PatientDataInterface) LoginPatient(email string, password string) (*patients.Patiententity, error) {
	ret := _m.Called(email, password)

	var r0 *patients.Patiententity
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*patients.Patiententity, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) *patients.Patiententity); ok {
		r0 = rf(email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*patients.Patiententity)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PatientDashboard provides a mock function with given fields:
func (_m *PatientDataInterface) PatientDashboard() (patients.PatientDashboard, error) {
	ret := _m.Called()

	var r0 patients.PatientDashboard
	var r1 error
	if rf, ok := ret.Get(0).(func() (patients.PatientDashboard, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() patients.PatientDashboard); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(patients.PatientDashboard)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, newData
func (_m *PatientDataInterface) Update(id int, newData patients.UpdateProfile) (bool, error) {
	ret := _m.Called(id, newData)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int, patients.UpdateProfile) (bool, error)); ok {
		return rf(id, newData)
	}
	if rf, ok := ret.Get(0).(func(int, patients.UpdateProfile) bool); ok {
		r0 = rf(id, newData)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int, patients.UpdateProfile) error); ok {
		r1 = rf(id, newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePassword provides a mock function with given fields: id, newData
func (_m *PatientDataInterface) UpdatePassword(id int, newData patients.UpdatePassword) (bool, error) {
	ret := _m.Called(id, newData)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int, patients.UpdatePassword) (bool, error)); ok {
		return rf(id, newData)
	}
	if rf, ok := ret.Get(0).(func(int, patients.UpdatePassword) bool); ok {
		r0 = rf(id, newData)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int, patients.UpdatePassword) error); ok {
		r1 = rf(id, newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStatus provides a mock function with given fields: id, newData
func (_m *PatientDataInterface) UpdateStatus(id int, newData patients.UpdateStatus) (bool, error) {
	ret := _m.Called(id, newData)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int, patients.UpdateStatus) (bool, error)); ok {
		return rf(id, newData)
	}
	if rf, ok := ret.Get(0).(func(int, patients.UpdateStatus) bool); ok {
		r0 = rf(id, newData)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int, patients.UpdateStatus) error); ok {
		r1 = rf(id, newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPatientDataInterface creates a new instance of PatientDataInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPatientDataInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *PatientDataInterface {
	mock := &PatientDataInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
