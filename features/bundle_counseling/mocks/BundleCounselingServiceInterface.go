// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	bundlecounseling "FinalProject/features/bundle_counseling"

	mock "github.com/stretchr/testify/mock"
)

// BundleCounselingServiceInterface is an autogenerated mock type for the BundleCounselingServiceInterface type
type BundleCounselingServiceInterface struct {
	mock.Mock
}

// CreateBundle provides a mock function with given fields: input, file
func (_m *BundleCounselingServiceInterface) CreateBundle(input bundlecounseling.BundleCounseling, file bundlecounseling.BundleCounselingFile) (*bundlecounseling.BundleCounseling, error) {
	ret := _m.Called(input, file)

	var r0 *bundlecounseling.BundleCounseling
	var r1 error
	if rf, ok := ret.Get(0).(func(bundlecounseling.BundleCounseling, bundlecounseling.BundleCounselingFile) (*bundlecounseling.BundleCounseling, error)); ok {
		return rf(input, file)
	}
	if rf, ok := ret.Get(0).(func(bundlecounseling.BundleCounseling, bundlecounseling.BundleCounselingFile) *bundlecounseling.BundleCounseling); ok {
		r0 = rf(input, file)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bundlecounseling.BundleCounseling)
		}
	}

	if rf, ok := ret.Get(1).(func(bundlecounseling.BundleCounseling, bundlecounseling.BundleCounselingFile) error); ok {
		r1 = rf(input, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBundle provides a mock function with given fields: id
func (_m *BundleCounselingServiceInterface) DeleteBundle(id int) (bool, error) {
	ret := _m.Called(id)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllBundle provides a mock function with given fields:
func (_m *BundleCounselingServiceInterface) GetAllBundle() ([]bundlecounseling.BundleCounselingInfo, error) {
	ret := _m.Called()

	var r0 []bundlecounseling.BundleCounselingInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]bundlecounseling.BundleCounselingInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []bundlecounseling.BundleCounselingInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bundlecounseling.BundleCounselingInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllBundleFilter provides a mock function with given fields: jenis, metode, durasi
func (_m *BundleCounselingServiceInterface) GetAllBundleFilter(jenis string, metode int, durasi int) ([]bundlecounseling.BundleCounselingInfo, error) {
	ret := _m.Called(jenis, metode, durasi)

	var r0 []bundlecounseling.BundleCounselingInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]bundlecounseling.BundleCounselingInfo, error)); ok {
		return rf(jenis, metode, durasi)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []bundlecounseling.BundleCounselingInfo); ok {
		r0 = rf(jenis, metode, durasi)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]bundlecounseling.BundleCounselingInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(jenis, metode, durasi)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBundle provides a mock function with given fields: id
func (_m *BundleCounselingServiceInterface) GetBundle(id int) (*bundlecounseling.BundleCounseling, error) {
	ret := _m.Called(id)

	var r0 *bundlecounseling.BundleCounseling
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*bundlecounseling.BundleCounseling, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *bundlecounseling.BundleCounseling); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bundlecounseling.BundleCounseling)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBundle provides a mock function with given fields: id, input, file
func (_m *BundleCounselingServiceInterface) UpdateBundle(id int, input bundlecounseling.BundleCounseling, file bundlecounseling.BundleCounselingFile) (bool, error) {
	ret := _m.Called(id, input, file)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int, bundlecounseling.BundleCounseling, bundlecounseling.BundleCounselingFile) (bool, error)); ok {
		return rf(id, input, file)
	}
	if rf, ok := ret.Get(0).(func(int, bundlecounseling.BundleCounseling, bundlecounseling.BundleCounselingFile) bool); ok {
		r0 = rf(id, input, file)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int, bundlecounseling.BundleCounseling, bundlecounseling.BundleCounselingFile) error); ok {
		r1 = rf(id, input, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBundleCounselingServiceInterface creates a new instance of BundleCounselingServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBundleCounselingServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *BundleCounselingServiceInterface {
	mock := &BundleCounselingServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
