// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	doctor "FinalProject/features/doctor"

	mock "github.com/stretchr/testify/mock"
)

// DoctorServiceInterface is an autogenerated mock type for the DoctorServiceInterface type
type DoctorServiceInterface struct {
	mock.Mock
}

// ApproveDoctor provides a mock function with given fields: idDoctor
func (_m *DoctorServiceInterface) ApproveDoctor(idDoctor int) (bool, error) {
	ret := _m.Called(idDoctor)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (bool, error)); ok {
		return rf(idDoctor)
	}
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(idDoctor)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(idDoctor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDoctor provides a mock function with given fields: newData
func (_m *DoctorServiceInterface) CreateDoctor(newData doctor.Doctor) (*doctor.Doctor, error) {
	ret := _m.Called(newData)

	var r0 *doctor.Doctor
	var r1 error
	if rf, ok := ret.Get(0).(func(doctor.Doctor) (*doctor.Doctor, error)); ok {
		return rf(newData)
	}
	if rf, ok := ret.Get(0).(func(doctor.Doctor) *doctor.Doctor); ok {
		r0 = rf(newData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*doctor.Doctor)
		}
	}

	if rf, ok := ret.Get(1).(func(doctor.Doctor) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDoctorEducation provides a mock function with given fields: newData
func (_m *DoctorServiceInterface) CreateDoctorEducation(newData doctor.DoctorEducation) (*doctor.DoctorEducation, error) {
	ret := _m.Called(newData)

	var r0 *doctor.DoctorEducation
	var r1 error
	if rf, ok := ret.Get(0).(func(doctor.DoctorEducation) (*doctor.DoctorEducation, error)); ok {
		return rf(newData)
	}
	if rf, ok := ret.Get(0).(func(doctor.DoctorEducation) *doctor.DoctorEducation); ok {
		r0 = rf(newData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*doctor.DoctorEducation)
		}
	}

	if rf, ok := ret.Get(1).(func(doctor.DoctorEducation) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDoctorExperience provides a mock function with given fields: newData
func (_m *DoctorServiceInterface) CreateDoctorExperience(newData doctor.DoctorExperience) (*doctor.DoctorExperience, error) {
	ret := _m.Called(newData)

	var r0 *doctor.DoctorExperience
	var r1 error
	if rf, ok := ret.Get(0).(func(doctor.DoctorExperience) (*doctor.DoctorExperience, error)); ok {
		return rf(newData)
	}
	if rf, ok := ret.Get(0).(func(doctor.DoctorExperience) *doctor.DoctorExperience); ok {
		r0 = rf(newData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*doctor.DoctorExperience)
		}
	}

	if rf, ok := ret.Get(1).(func(doctor.DoctorExperience) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDoctorExpertise provides a mock function with given fields: newData
func (_m *DoctorServiceInterface) CreateDoctorExpertise(newData doctor.DoctorExpertiseRelation) (*doctor.DoctorExpertiseRelation, error) {
	ret := _m.Called(newData)

	var r0 *doctor.DoctorExpertiseRelation
	var r1 error
	if rf, ok := ret.Get(0).(func(doctor.DoctorExpertiseRelation) (*doctor.DoctorExpertiseRelation, error)); ok {
		return rf(newData)
	}
	if rf, ok := ret.Get(0).(func(doctor.DoctorExpertiseRelation) *doctor.DoctorExpertiseRelation); ok {
		r0 = rf(newData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*doctor.DoctorExpertiseRelation)
		}
	}

	if rf, ok := ret.Get(1).(func(doctor.DoctorExpertiseRelation) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDoctorWorkadays provides a mock function with given fields: newData
func (_m *DoctorServiceInterface) CreateDoctorWorkadays(newData doctor.DoctorWorkdays) (*doctor.DoctorWorkdays, error) {
	ret := _m.Called(newData)

	var r0 *doctor.DoctorWorkdays
	var r1 error
	if rf, ok := ret.Get(0).(func(doctor.DoctorWorkdays) (*doctor.DoctorWorkdays, error)); ok {
		return rf(newData)
	}
	if rf, ok := ret.Get(0).(func(doctor.DoctorWorkdays) *doctor.DoctorWorkdays); ok {
		r0 = rf(newData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*doctor.DoctorWorkdays)
		}
	}

	if rf, ok := ret.Get(1).(func(doctor.DoctorWorkdays) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDoctor provides a mock function with given fields: doctorID
func (_m *DoctorServiceInterface) DeleteDoctor(doctorID int) (bool, error) {
	ret := _m.Called(doctorID)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (bool, error)); ok {
		return rf(doctorID)
	}
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(doctorID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(doctorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDoctorEducation provides a mock function with given fields: doctorID
func (_m *DoctorServiceInterface) DeleteDoctorEducation(doctorID int) (bool, error) {
	ret := _m.Called(doctorID)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (bool, error)); ok {
		return rf(doctorID)
	}
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(doctorID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(doctorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDoctorExperience provides a mock function with given fields: doctorID
func (_m *DoctorServiceInterface) DeleteDoctorExperience(doctorID int) (bool, error) {
	ret := _m.Called(doctorID)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (bool, error)); ok {
		return rf(doctorID)
	}
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(doctorID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(doctorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDoctorRating provides a mock function with given fields: doctorID
func (_m *DoctorServiceInterface) DeleteDoctorRating(doctorID int) (bool, error) {
	ret := _m.Called(doctorID)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (bool, error)); ok {
		return rf(doctorID)
	}
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(doctorID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(doctorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDoctorWorkdays provides a mock function with given fields: doctorID
func (_m *DoctorServiceInterface) DeleteDoctorWorkdays(doctorID int) (bool, error) {
	ret := _m.Called(doctorID)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (bool, error)); ok {
		return rf(doctorID)
	}
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(doctorID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(doctorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DenyDoctor provides a mock function with given fields: idDoctor
func (_m *DoctorServiceInterface) DenyDoctor(idDoctor int) (bool, error) {
	ret := _m.Called(idDoctor)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (bool, error)); ok {
		return rf(idDoctor)
	}
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(idDoctor)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(idDoctor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DoctorAvatarUpload provides a mock function with given fields: newData
func (_m *DoctorServiceInterface) DoctorAvatarUpload(newData doctor.DoctorAvatarPhoto) (string, error) {
	ret := _m.Called(newData)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(doctor.DoctorAvatarPhoto) (string, error)); ok {
		return rf(newData)
	}
	if rf, ok := ret.Get(0).(func(doctor.DoctorAvatarPhoto) string); ok {
		r0 = rf(newData)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(doctor.DoctorAvatarPhoto) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DoctorCVUpload provides a mock function with given fields: newData
func (_m *DoctorServiceInterface) DoctorCVUpload(newData doctor.DoctorCVDataModel) (string, error) {
	ret := _m.Called(newData)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(doctor.DoctorCVDataModel) (string, error)); ok {
		return rf(newData)
	}
	if rf, ok := ret.Get(0).(func(doctor.DoctorCVDataModel) string); ok {
		r0 = rf(newData)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(doctor.DoctorCVDataModel) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DoctorDashboard provides a mock function with given fields: id
func (_m *DoctorServiceInterface) DoctorDashboard(id int) (doctor.DoctorDashboard, error) {
	ret := _m.Called(id)

	var r0 doctor.DoctorDashboard
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (doctor.DoctorDashboard, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) doctor.DoctorDashboard); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(doctor.DoctorDashboard)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DoctorDashboardAdmin provides a mock function with given fields:
func (_m *DoctorServiceInterface) DoctorDashboardAdmin() (doctor.DoctorDashboardAdmin, error) {
	ret := _m.Called()

	var r0 doctor.DoctorDashboardAdmin
	var r1 error
	if rf, ok := ret.Get(0).(func() (doctor.DoctorDashboardAdmin, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() doctor.DoctorDashboardAdmin); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(doctor.DoctorDashboardAdmin)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DoctorDashboardPatient provides a mock function with given fields: id
func (_m *DoctorServiceInterface) DoctorDashboardPatient(id int) ([]doctor.DoctorDashboardPatient, error) {
	ret := _m.Called(id)

	var r0 []doctor.DoctorDashboardPatient
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]doctor.DoctorDashboardPatient, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) []doctor.DoctorDashboardPatient); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]doctor.DoctorDashboardPatient)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DoctorIjazahUpload provides a mock function with given fields: newData
func (_m *DoctorServiceInterface) DoctorIjazahUpload(newData doctor.DoctorIjazahDataModel) (string, error) {
	ret := _m.Called(newData)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(doctor.DoctorIjazahDataModel) (string, error)); ok {
		return rf(newData)
	}
	if rf, ok := ret.Get(0).(func(doctor.DoctorIjazahDataModel) string); ok {
		r0 = rf(newData)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(doctor.DoctorIjazahDataModel) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DoctorSIPPUpload provides a mock function with given fields: newData
func (_m *DoctorServiceInterface) DoctorSIPPUpload(newData doctor.DoctorSIPPFileDataModel) (string, error) {
	ret := _m.Called(newData)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(doctor.DoctorSIPPFileDataModel) (string, error)); ok {
		return rf(newData)
	}
	if rf, ok := ret.Get(0).(func(doctor.DoctorSIPPFileDataModel) string); ok {
		r0 = rf(newData)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(doctor.DoctorSIPPFileDataModel) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DoctorSTRUpload provides a mock function with given fields: newData
func (_m *DoctorServiceInterface) DoctorSTRUpload(newData doctor.DoctorSTRFileDataModel) (string, error) {
	ret := _m.Called(newData)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(doctor.DoctorSTRFileDataModel) (string, error)); ok {
		return rf(newData)
	}
	if rf, ok := ret.Get(0).(func(doctor.DoctorSTRFileDataModel) string); ok {
		r0 = rf(newData)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(doctor.DoctorSTRFileDataModel) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDoctor provides a mock function with given fields: id
func (_m *DoctorServiceInterface) GetDoctor(id int) (*doctor.DoctorAll, error) {
	ret := _m.Called(id)

	var r0 *doctor.DoctorAll
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*doctor.DoctorAll, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *doctor.DoctorAll); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*doctor.DoctorAll)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDoctorByUserId provides a mock function with given fields: userID
func (_m *DoctorServiceInterface) GetDoctorByUserId(userID int) (*doctor.DoctorAll, error) {
	ret := _m.Called(userID)

	var r0 *doctor.DoctorAll
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*doctor.DoctorAll, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) *doctor.DoctorAll); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*doctor.DoctorAll)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDoctorEducation provides a mock function with given fields: id
func (_m *DoctorServiceInterface) GetDoctorEducation(id int) ([]doctor.DoctorEducation, error) {
	ret := _m.Called(id)

	var r0 []doctor.DoctorEducation
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]doctor.DoctorEducation, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) []doctor.DoctorEducation); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]doctor.DoctorEducation)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDoctorExperience provides a mock function with given fields: id
func (_m *DoctorServiceInterface) GetDoctorExperience(id int) ([]doctor.DoctorExperience, error) {
	ret := _m.Called(id)

	var r0 []doctor.DoctorExperience
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]doctor.DoctorExperience, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) []doctor.DoctorExperience); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]doctor.DoctorExperience)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDoctorWorkadays provides a mock function with given fields: id
func (_m *DoctorServiceInterface) GetDoctorWorkadays(id int) ([]doctor.DoctorWorkdays, error) {
	ret := _m.Called(id)

	var r0 []doctor.DoctorWorkdays
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]doctor.DoctorWorkdays, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) []doctor.DoctorWorkdays); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]doctor.DoctorWorkdays)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDoctors provides a mock function with given fields: name
func (_m *DoctorServiceInterface) GetDoctors(name string) ([]doctor.DoctorAll, error) {
	ret := _m.Called(name)

	var r0 []doctor.DoctorAll
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]doctor.DoctorAll, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) []doctor.DoctorAll); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]doctor.DoctorAll)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMeetLink provides a mock function with given fields:
func (_m *DoctorServiceInterface) GetMeetLink() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDoctorDatapokok provides a mock function with given fields: id, newData
func (_m *DoctorServiceInterface) UpdateDoctorDatapokok(id int, newData doctor.DoctorDatapokokUpdate) (bool, error) {
	ret := _m.Called(id, newData)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int, doctor.DoctorDatapokokUpdate) (bool, error)); ok {
		return rf(id, newData)
	}
	if rf, ok := ret.Get(0).(func(int, doctor.DoctorDatapokokUpdate) bool); ok {
		r0 = rf(id, newData)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int, doctor.DoctorDatapokokUpdate) error); ok {
		r1 = rf(id, newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDoctorEducation provides a mock function with given fields: id, doctorID, newData
func (_m *DoctorServiceInterface) UpdateDoctorEducation(id int, doctorID int, newData doctor.DoctorEducation) (bool, error) {
	ret := _m.Called(id, doctorID, newData)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, doctor.DoctorEducation) (bool, error)); ok {
		return rf(id, doctorID, newData)
	}
	if rf, ok := ret.Get(0).(func(int, int, doctor.DoctorEducation) bool); ok {
		r0 = rf(id, doctorID, newData)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int, int, doctor.DoctorEducation) error); ok {
		r1 = rf(id, doctorID, newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDoctorExperience provides a mock function with given fields: id, doctorID, newData
func (_m *DoctorServiceInterface) UpdateDoctorExperience(id int, doctorID int, newData doctor.DoctorExperience) (bool, error) {
	ret := _m.Called(id, doctorID, newData)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, doctor.DoctorExperience) (bool, error)); ok {
		return rf(id, doctorID, newData)
	}
	if rf, ok := ret.Get(0).(func(int, int, doctor.DoctorExperience) bool); ok {
		r0 = rf(id, doctorID, newData)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int, int, doctor.DoctorExperience) error); ok {
		r1 = rf(id, doctorID, newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDoctorRating provides a mock function with given fields: id, patientID, newData
func (_m *DoctorServiceInterface) UpdateDoctorRating(id int, patientID int, newData doctor.DoctorRating) (bool, error) {
	ret := _m.Called(id, patientID, newData)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, doctor.DoctorRating) (bool, error)); ok {
		return rf(id, patientID, newData)
	}
	if rf, ok := ret.Get(0).(func(int, int, doctor.DoctorRating) bool); ok {
		r0 = rf(id, patientID, newData)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int, int, doctor.DoctorRating) error); ok {
		r1 = rf(id, patientID, newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDoctorWorkdays provides a mock function with given fields: id, doctorID, newData
func (_m *DoctorServiceInterface) UpdateDoctorWorkdays(id int, doctorID int, newData doctor.DoctorWorkdays) (bool, error) {
	ret := _m.Called(id, doctorID, newData)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int, doctor.DoctorWorkdays) (bool, error)); ok {
		return rf(id, doctorID, newData)
	}
	if rf, ok := ret.Get(0).(func(int, int, doctor.DoctorWorkdays) bool); ok {
		r0 = rf(id, doctorID, newData)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int, int, doctor.DoctorWorkdays) error); ok {
		r1 = rf(id, doctorID, newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDoctorServiceInterface creates a new instance of DoctorServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDoctorServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *DoctorServiceInterface {
	mock := &DoctorServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
