// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	articlecategories "FinalProject/features/article_categories"

	mock "github.com/stretchr/testify/mock"
)

// ArticleCategoryServiceInterface is an autogenerated mock type for the ArticleCategoryServiceInterface type
type ArticleCategoryServiceInterface struct {
	mock.Mock
}

// CreateArticleCategory provides a mock function with given fields: newData
func (_m *ArticleCategoryServiceInterface) CreateArticleCategory(newData articlecategories.ArticleCategory) (*articlecategories.ArticleCategory, error) {
	ret := _m.Called(newData)

	var r0 *articlecategories.ArticleCategory
	var r1 error
	if rf, ok := ret.Get(0).(func(articlecategories.ArticleCategory) (*articlecategories.ArticleCategory, error)); ok {
		return rf(newData)
	}
	if rf, ok := ret.Get(0).(func(articlecategories.ArticleCategory) *articlecategories.ArticleCategory); ok {
		r0 = rf(newData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*articlecategories.ArticleCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(articlecategories.ArticleCategory) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteArticleCategory provides a mock function with given fields: id
func (_m *ArticleCategoryServiceInterface) DeleteArticleCategory(id int) (bool, error) {
	ret := _m.Called(id)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArticleCategories provides a mock function with given fields:
func (_m *ArticleCategoryServiceInterface) GetArticleCategories() ([]articlecategories.ArticleCategory, error) {
	ret := _m.Called()

	var r0 []articlecategories.ArticleCategory
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]articlecategories.ArticleCategory, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []articlecategories.ArticleCategory); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]articlecategories.ArticleCategory)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArticleCategory provides a mock function with given fields: id
func (_m *ArticleCategoryServiceInterface) GetArticleCategory(id int) ([]articlecategories.ArticleCategory, error) {
	ret := _m.Called(id)

	var r0 []articlecategories.ArticleCategory
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]articlecategories.ArticleCategory, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) []articlecategories.ArticleCategory); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]articlecategories.ArticleCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateArticleCategory provides a mock function with given fields: newData, id
func (_m *ArticleCategoryServiceInterface) UpdateArticleCategory(newData articlecategories.UpdateArticleCategory, id int) (bool, error) {
	ret := _m.Called(newData, id)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(articlecategories.UpdateArticleCategory, int) (bool, error)); ok {
		return rf(newData, id)
	}
	if rf, ok := ret.Get(0).(func(articlecategories.UpdateArticleCategory, int) bool); ok {
		r0 = rf(newData, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(articlecategories.UpdateArticleCategory, int) error); ok {
		r1 = rf(newData, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewArticleCategoryServiceInterface creates a new instance of ArticleCategoryServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArticleCategoryServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ArticleCategoryServiceInterface {
	mock := &ArticleCategoryServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
