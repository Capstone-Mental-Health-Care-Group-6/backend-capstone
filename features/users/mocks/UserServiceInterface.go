// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	users "FinalProject/features/users"

	mock "github.com/stretchr/testify/mock"
)

// UserServiceInterface is an autogenerated mock type for the UserServiceInterface type
type UserServiceInterface struct {
	mock.Mock
}

// ForgetPasswordWeb provides a mock function with given fields: email
func (_m *UserServiceInterface) ForgetPasswordWeb(email string) error {
	ret := _m.Called(email)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenerateJwt provides a mock function with given fields: email
func (_m *UserServiceInterface) GenerateJwt(email string) (*users.UserCredential, error) {
	ret := _m.Called(email)

	var r0 *users.UserCredential
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*users.UserCredential, error)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *users.UserCredential); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.UserCredential)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: email, password
func (_m *UserServiceInterface) Login(email string, password string) (*users.UserCredential, error) {
	ret := _m.Called(email, password)

	var r0 *users.UserCredential
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*users.UserCredential, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) *users.UserCredential); ok {
		r0 = rf(email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.UserCredential)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: newData
func (_m *UserServiceInterface) Register(newData users.User) (*users.User, error) {
	ret := _m.Called(newData)

	var r0 *users.User
	var r1 error
	if rf, ok := ret.Get(0).(func(users.User) (*users.User, error)); ok {
		return rf(newData)
	}
	if rf, ok := ret.Get(0).(func(users.User) *users.User); ok {
		r0 = rf(newData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.User)
		}
	}

	if rf, ok := ret.Get(1).(func(users.User) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetPassword provides a mock function with given fields: code, email, password
func (_m *UserServiceInterface) ResetPassword(code string, email string, password string) error {
	ret := _m.Called(code, email, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(code, email, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TokenResetVerify provides a mock function with given fields: code
func (_m *UserServiceInterface) TokenResetVerify(code string) (*users.UserResetPass, error) {
	ret := _m.Called(code)

	var r0 *users.UserResetPass
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*users.UserResetPass, error)); ok {
		return rf(code)
	}
	if rf, ok := ret.Get(0).(func(string) *users.UserResetPass); ok {
		r0 = rf(code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*users.UserResetPass)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProfile provides a mock function with given fields: id, newData
func (_m *UserServiceInterface) UpdateProfile(id int, newData users.UpdateProfile) (bool, error) {
	ret := _m.Called(id, newData)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int, users.UpdateProfile) (bool, error)); ok {
		return rf(id, newData)
	}
	if rf, ok := ret.Get(0).(func(int, users.UpdateProfile) bool); ok {
		r0 = rf(id, newData)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int, users.UpdateProfile) error); ok {
		r1 = rf(id, newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserServiceInterface creates a new instance of UserServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserServiceInterface {
	mock := &UserServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
