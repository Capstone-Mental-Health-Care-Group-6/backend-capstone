// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	CounselingSession "FinalProject/features/counseling_session"

	mock "github.com/stretchr/testify/mock"
)

// CounselingSessionDataInterface is an autogenerated mock type for the CounselingSessionDataInterface type
type CounselingSessionDataInterface struct {
	mock.Mock
}

// ApprovePatient provides a mock function with given fields: id
func (_m *CounselingSessionDataInterface) ApprovePatient(id int) (bool, error) {
	ret := _m.Called(id)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckPatient provides a mock function with given fields: id, doctorID
func (_m *CounselingSessionDataInterface) CheckPatient(id int, doctorID int) error {
	ret := _m.Called(id, doctorID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(id, doctorID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: input
func (_m *CounselingSessionDataInterface) Create(input CounselingSession.CounselingSession) (*CounselingSession.CounselingSession, error) {
	ret := _m.Called(input)

	var r0 *CounselingSession.CounselingSession
	var r1 error
	if rf, ok := ret.Get(0).(func(CounselingSession.CounselingSession) (*CounselingSession.CounselingSession, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(CounselingSession.CounselingSession) *CounselingSession.CounselingSession); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CounselingSession.CounselingSession)
		}
	}

	if rf, ok := ret.Get(1).(func(CounselingSession.CounselingSession) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *CounselingSessionDataInterface) Delete(id int) (bool, error) {
	ret := _m.Called(id)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *CounselingSessionDataInterface) GetAll() ([]CounselingSession.CounselingSession, error) {
	ret := _m.Called()

	var r0 []CounselingSession.CounselingSession
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]CounselingSession.CounselingSession, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []CounselingSession.CounselingSession); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]CounselingSession.CounselingSession)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllCounselingByUserID provides a mock function with given fields: userID
func (_m *CounselingSessionDataInterface) GetAllCounselingByUserID(userID int) ([]CounselingSession.CounselingSession, error) {
	ret := _m.Called(userID)

	var r0 []CounselingSession.CounselingSession
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]CounselingSession.CounselingSession, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) []CounselingSession.CounselingSession); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]CounselingSession.CounselingSession)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: id
func (_m *CounselingSessionDataInterface) GetById(id int) (*CounselingSession.CounselingSession, error) {
	ret := _m.Called(id)

	var r0 *CounselingSession.CounselingSession
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*CounselingSession.CounselingSession, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *CounselingSession.CounselingSession); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*CounselingSession.CounselingSession)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RejectPatient provides a mock function with given fields: id, newData
func (_m *CounselingSessionDataInterface) RejectPatient(id int, newData CounselingSession.StatusUpdate) (bool, error) {
	ret := _m.Called(id, newData)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int, CounselingSession.StatusUpdate) (bool, error)); ok {
		return rf(id, newData)
	}
	if rf, ok := ret.Get(0).(func(int, CounselingSession.StatusUpdate) bool); ok {
		r0 = rf(id, newData)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int, CounselingSession.StatusUpdate) error); ok {
		r1 = rf(id, newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, newData
func (_m *CounselingSessionDataInterface) Update(id int, newData CounselingSession.CounselingSession) (bool, error) {
	ret := _m.Called(id, newData)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int, CounselingSession.CounselingSession) (bool, error)); ok {
		return rf(id, newData)
	}
	if rf, ok := ret.Get(0).(func(int, CounselingSession.CounselingSession) bool); ok {
		r0 = rf(id, newData)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int, CounselingSession.CounselingSession) error); ok {
		r1 = rf(id, newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCounselingSessionDataInterface creates a new instance of CounselingSessionDataInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCounselingSessionDataInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *CounselingSessionDataInterface {
	mock := &CounselingSessionDataInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
