// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// EmailInterface is an autogenerated mock type for the EmailInterface type
type EmailInterface struct {
	mock.Mock
}

// HTMLBody provides a mock function with given fields: role, name
func (_m *EmailInterface) HTMLBody(role string, name string) (string, string, string) {
	ret := _m.Called(role, name)

	var r0 string
	var r1 string
	var r2 string
	if rf, ok := ret.Get(0).(func(string, string) (string, string, string)); ok {
		return rf(role, name)
	}
	if rf, ok := ret.Get(0).(func(string, string) string); ok {
		r0 = rf(role, name)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string) string); ok {
		r1 = rf(role, name)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, string) string); ok {
		r2 = rf(role, name)
	} else {
		r2 = ret.Get(2).(string)
	}

	return r0, r1, r2
}

// HtmlBodyRegistDoctor provides a mock function with given fields: name
func (_m *EmailInterface) HtmlBodyRegistDoctor(name string) (string, string) {
	ret := _m.Called(name)

	var r0 string
	var r1 string
	if rf, ok := ret.Get(0).(func(string) (string, string)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) string); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(string)
	}

	return r0, r1
}

// SendEmail provides a mock function with given fields: to, subject, body
func (_m *EmailInterface) SendEmail(to string, subject string, body string) error {
	ret := _m.Called(to, subject, body)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(to, subject, body)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewEmailInterface creates a new instance of EmailInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmailInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmailInterface {
	mock := &EmailInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
