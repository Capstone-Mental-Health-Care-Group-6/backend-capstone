// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	coreapi "github.com/midtrans/midtrans-go/coreapi"

	mock "github.com/stretchr/testify/mock"
)

// MidtransService is an autogenerated mock type for the MidtransService type
type MidtransService struct {
	mock.Mock
}

// GenerateTransaction provides a mock function with given fields: result, paymentType
func (_m *MidtransService) GenerateTransaction(result int, paymentType string) (*coreapi.ChargeResponse, map[string]interface{}, error) {
	ret := _m.Called(result, paymentType)

	var r0 *coreapi.ChargeResponse
	var r1 map[string]interface{}
	var r2 error
	if rf, ok := ret.Get(0).(func(int, string) (*coreapi.ChargeResponse, map[string]interface{}, error)); ok {
		return rf(result, paymentType)
	}
	if rf, ok := ret.Get(0).(func(int, string) *coreapi.ChargeResponse); ok {
		r0 = rf(result, paymentType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*coreapi.ChargeResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(int, string) map[string]interface{}); ok {
		r1 = rf(result, paymentType)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(2).(func(int, string) error); ok {
		r2 = rf(result, paymentType)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TransactionStatus provides a mock function with given fields: notificationPayload
func (_m *MidtransService) TransactionStatus(notificationPayload map[string]interface{}) (int, string, error) {
	ret := _m.Called(notificationPayload)

	var r0 int
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) (int, string, error)); ok {
		return rf(notificationPayload)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}) int); ok {
		r0 = rf(notificationPayload)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}) string); ok {
		r1 = rf(notificationPayload)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(map[string]interface{}) error); ok {
		r2 = rf(notificationPayload)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewMidtransService creates a new instance of MidtransService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMidtransService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MidtransService {
	mock := &MidtransService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
